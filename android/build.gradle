group = "io.github.taalaydev.fluttervox.flutter_vox"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()

    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()

//        flatDir {
//            dirs "libs"
//        }
//        maven { url "https://raw.githubusercontent.com/cmusphinx/cmusphinx.github.io/master/repo" }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "io.github.taalaydev.fluttervox.flutter_vox"

    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")

//        implementation(group: 'edu.cmu.pocketsphinx', name: 'pocketsphinx-android', version: '5prealpha-release', ext: 'aar') {
//            transitive = true
//        }
        implementation fileTree(include: ['*.jar'], dir: 'libs')

        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

ant.importBuild 'assets.xml'
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)